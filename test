---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Sample VPC'

Parameters:

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  Subnet01Block:
    Type: String
    Default: 192.168.1.0/24
    Description: CidrBlock for subnet 01 within the VPC

  Subnet02Block:
    Type: String
    Default: 192.168.2.0/24
    Description: CidrBlock for subnet 02 within the VPC

  Subnet03Block:
    Type: String
    Default: 192.168.3.0/24
    Description: CidrBlock for subnet 03 within the VPC. This is used only if the region has more than 2 AZs.
##  KeyName:
##    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
##    Type: "AWS::EC2::KeyPair::KeyName"
##    ConstraintDescription: "must be the name of an existing EC2 KeyPair"
#    Default:harry

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Subnet01Block
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet01"

  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref Subnet02Block
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet02"

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref RouteTable


 # MyEC2Instance:
 #   Type: AWS::EC2::Instance
 #   Properties:
 #     ImageId: "ami-0927ed83617754711"
 #     KeyName: harry
 #     SubnetId: !Ref Subnet01
 #     InstanceType: t2.micro
 #     SecurityGroupIds:
 #       - Ref: InstanceSecurityGroup
 #     UserData:
 #       Fn::Base64: !Sub |
 #         #!/bin/bash -xe
 #         apt-get -y update
 #         apt-get -y install apache2
 #         echo "harish" > /var/www/html/index.html

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
     # GroupName: "Internet Group"
      GroupDescription: allow all in, all traffic out
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
##Outputs:
##  VPC:
##    Description: VPC ID
##    Value: !Ref VPC
#    Export:
#      Name: harish-kutta
##  Subnetharish:
##    Description: The subnet ID to use for public web servers
##    Value: !Ref Subnet01
#    Export:
#      Name: harish-kutta-subnet
